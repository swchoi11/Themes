class Prompt:
    @staticmethod
    def calender_text_issue():
        return """
        다음 이미지는 달력 아이콘입니다. 이 이미지에서 요일 또는 날짜 글자가 아이콘의 테두리를 벗어났는지 아닌지 확인해주세요.

        이슈가 없는 경우 None을 반환해 주세요.
        아이콘의 테두리를 벗어났는지 여부는 엄격하게 판단해야 합니다. 아이콘을 이루는 배경보다 글자가 바깥으로 나가있는 경우에만 이슈가 있다고 판단하세요.        
        이슈가 있는 경우 이런 형식의 응답을 반환해 주세요. 

        score 값은 이슈의 심각도 정도를 말합니다. 이에 대한 측도는 다음과 같습니다.
        - 1: (Fail with Critical issue)
        - 2: (Fail with issue)
        - 3: (Conditional Pass)
        - 4: (Pass with minor concern)
        - 5: (Pass with no issue)

        description 값은 이슈의 설명을 말합니다. 자세히 작성해주세요.
        
        예시)
        score: 1
        description: 앱 라이브러리의 캘린더 앱의 달력 아이콘에서 글자가 테두리를 벗어나 있습니다. 
        """
    
    @staticmethod
    def clock_issue():
        return """

        다음 이미지는 상단바의 시간정보와 시계 아이콘입니다. 
        시계 아이콘의 시침과 분침이 나타내는 시간 정보가 상단바의 시간정보(예 14:03)과 매칭되는지 확인해 주세요.
        시계 아이콘에 인덱스가 없는 경우에 엄격하게 판단하지 말고, 아예 다른 사분면에 있는 경우에만 이슈가 있다고 판단해주세요.
        이슈가 있다고 판단되는 경우에는 구체적으로 어떤 시간으로 추정되는지 근거를 대세요.
        매칭되고 정상인 경우 None을 반환해 주세요.

        score 값은 이슈의 심각도 정도를 말합니다. 이에 대한 측도는 다음과 같습니다.
        - 1: (Fail with Critical issue)
        - 2: (Fail with issue)
        - 3: (Conditional Pass)
        - 4: (Pass with minor concern)
        - 5: (Pass with no issue)

        description 값은 이슈의 설명을 말합니다. 자세히 작성해주세요.
        
        예시)
        score: 1
        description: 바탕화면 시계 앱이 표시하는 시간은 12:34이나, 상단의 시각은 08:00입니다. 
        """

    @staticmethod
    def interaction_issue():
        return """
        다음 이미지는 핸드폰의 실제 사용 화면입니다.       
        다음 이미지에서 상호작용 가능한 요소가 시각적으로 명확히 구분되지 않는 이슈가 있는지 확인해 주세요.
        예를 들면 이런 이슈가 있을 수 있습니다. 
        - 빠른 설정 화면에 와이파이 버튼이 표시되지 않음
        - 메시지로 보낸 하이퍼링크가 표시되지 않음
        
        이슈가 없는 경우 None을 반환해 주세요. 모든 이미지에 빠른 설정 화면이나 하이퍼링크, 텍스트 등이 있지 않습니다. 이런 요소가 있는 경우에만 판정하여야 합니다.
        이슈가 있는 경우 이런 형식의 응답을 반환해 주세요. 이슈 번호는 13로 고정해 주세요.
        거의 보이지 않는 경우에만 이슈가 있다고 판단해야 합니다. 거의 보이지 않는 경우란, 색상 대비값이 0.05 이하인 경우입니다.
        
        score 값은 이슈의 심각도 정도를 말합니다. 이에 대한 측도는 다음과 같습니다.
        - 1: (Fail with Critical issue)
        - 2: (Fail with issue)
        - 3: (Conditional Pass)
        - 4: (Pass with minor concern)
        - 5: (Pass with no issue)
        
        bbox 값은 이슈가 발생한 지점의 위치를 말합니다. 실제 이미지의 좌표를 0~1사이로 정규화하여 제공해주세요.
        description 값은 이슈의 설명을 말합니다. 자세히 작성해주세요.


        예시)
        score: 1
        bbox: [0.01875, 0.014784, 0.15125, 0.038978]
        description: 상태 표시줄 또는 빠른 설정 화면에 와이파이 버튼이 표시되지 않음
        """
    
    @staticmethod
    def alignment_check_prompt():
        return """
        **역할:** 당신은 UI 요소 또는 텍스트 컴포넌트의 정렬 상태를 분석하는 레이아웃 분석 전문가입니다.

        **목표:** 제공된 각 수직 구간(`bounds`)과 해당 구간 내 컴포넌트들의 좌표(`components`) 정보를 바탕으로, 컴포넌트들이 잘 정렬되었는지 여부를 판단하여 그 결과를 지정된 JSON 형식의 리스트로 반환합니다.

        **입력 데이터 설명:**
        입력 데이터는 각 수직 구간별 정보를 담고 있는 딕셔너리들의 리스트 형태로 주어질 수 있습니다. 각 딕셔너리는 다음과 같은 구조를 가집니다.
        `{'bounds': (y1, y2), 'components': [(comp1_x1, comp1_y1, comp1_x2, comp1_y2), (comp2_x1, comp2_y1, comp2_x2, comp2_y2), ...]}`

        * `'bounds': (y1, y2)`: 컴포넌트들이 위치하는 공통 수직 구간의 시작 y좌표와 끝 y좌표를 나타냅니다.
        * `'components'`: 해당 수직 구간 내에 존재하는 컴포넌트들의 리스트입니다. 각 컴포넌트는 `(x1, y1, x2, y2)` 튜플로 표현되며, 이는 각 컴포넌트의 왼쪽 위 (x1, y1) 좌표와 오른쪽 아래 (x2, y2) 좌표를 의미합니다. (일반적으로 `bounds`의 y1, y2는 `components` 내 개별 컴포넌트의 y1, y2와 일치하거나 매우 유사합니다.)

        **분석 및 판단 기준 (각 `bounds` 항목에 대해 다음 단계를 엄격히 따르세요):**

        1.  **컴포넌트 그룹 식별 (계층 구조 고려):**
            **a. 수직 레이어 그룹화 (행 그룹화):**
                * `components` 리스트 내의 컴포넌트들을 **y좌표값(주로 `y1`과 `y2`의 평균 또는 범위)을 기준**으로 그룹화합니다. `y` 좌표값들이 현저히 다른 컴포넌트들은 별개의 **"수직 레이어 그룹(행 그룹)"**으로 우선 분리합니다.
                * (예: 한 `bounds` 내에 y좌표대가 다른 여러 줄의 텍스트나 요소들이 있다면, 각 줄을 별도의 수직 레이어 그룹으로 인식합니다.)
            **b. 수평 하위 그룹화:**
                * **각각의 "수직 레이어 그룹" 내에서**, 컴포넌트들을 x1 좌표 기준으로 정렬한 후, 인접한 컴포넌트들 사이의 수평 간격(`현재_컴포넌트.x1 - 이전_컴포넌트.x2`)을 비교합니다. 만약 특정 지점에서 이 간격이 그룹 내 다른 간격들에 비해 **현저히 크다면**, 이를 기준으로 **"수평 하위 그룹"**을 나눌 수 있습니다.
            * 명확한 하위 그룹(수직 레이어든, 그 안의 수평 하위 그룹이든)을 식별할 수 없다면 (예: 모든 컴포넌트가 단일 행에 있고 수평 간격도 유사한 경우), 해당 `bounds` 내 모든 컴포넌트를 **단일 최종 분석 그룹**으로 취급합니다.
        
        2.  **그룹 내 정렬 상태 평가:**
            * 1단계에서 식별된 **각 그룹별로** (또는 단일 그룹의 경우 해당 그룹에 대해) 다음 정렬 조건 중 **하나라도 명확히 충족**하면 해당 그룹은 "잘 정렬됨(aligned)"으로 간주합니다. 약간의 오차(예: 몇 픽셀 이내)는 허용될 수 있습니다.
                * **왼쪽 정렬:** 그룹 내 대부분의 컴포넌트들이 거의 동일한 `x1` 좌표를 가집니다.
                * **가운데 정렬:** 그룹 내 대부분의 컴포넌트들이 거의 동일한 중앙 x좌표 `(x1+x2)/2`를 가집니다.
                * **오른쪽 정렬:** 그룹 내 대부분의 컴포넌트들이 거의 동일한 `x2` 좌표를 가집니다.
                * **균등 간격 배분 (2개 이상 컴포넌트):** 그룹 내 컴포넌트들을 x1 기준으로 정렬했을 때, 연속된 컴포넌트들 사이의 수평 간격 (예: `다음_컴포넌트.x1 - 현재_컴포넌트.x2`)이 거의 일정합니다.
                * **단일 컴포넌트 그룹:** 그룹 내 컴포넌트가 1개 또는 2개만 있는 경우, 그 자체로 "잘 정렬됨"으로 간주합니다.
        
        3.  **`bounds` 전체의 정렬 상태 최종 결정:**
            **A. 단일 최종 분석 그룹의 경우:**
                * 1단계에서 모든 컴포넌트가 단일 "최종 분석 그룹"으로 취급된 경우: 해당 그룹이 2단계의 "내부적으로 잘 정렬됨" 기준을 충족하면 `'aligned': True`로, 그렇지 않으면 `'aligned': False`로 결정합니다.
            **B. 다중 최종 분석 그룹이 식별된 경우:**
                * 다음 중 **하나라도** 충족하면 `'aligned': True`로 판단합니다.
                    1.  **모든 개별 그룹의 완벽한 내부 정렬:** 식별된 모든 "최종 분석 그룹" 각각이 2단계에서 정의한 "내부적으로 잘 정렬됨" 기준을 **모두** 충족하는 경우.
                    2.  **그룹 간 대칭/패턴 정렬 (새로운 규칙):**
                        * **주요 그룹(행) 간 중심점 정렬:** 만약 1.a 단계에서 2개 이상의 주요 **"수직 레이어 그룹(행 그룹)"**들이 식별되었고, 
                        이 그룹들 각각이 2단계의 "내부적으로 잘 정렬됨" 기준을 일부 만족하지 못하더라도, 
                        이들 **각 "수직 레이어 그룹(행 그룹)"의 전체 가로폭 중심점**(각 행 그룹에 속한 모든 컴포넌트들의 가장 왼쪽 `x1`부터 가장 오른쪽 `x2`까지 범위의 중간 지점)이 **서로 거의 일치**하는 경우. 
                        (예: 사용자가 제공한 2x2 예시처럼 각 행의 중심이 동일한 경우)
                * **그 외의 경우:** 위 B.1과 B.2의 조건들을 모두 만족하지 못하면 `'aligned': False`로 판단합니다.
        
        **출력 형식:** 
        분석 결과를 다음 형식의 **JSON 리스트**로 반환해 주세요. 각 객체는 입력된 `bounds` 하나에 대한 분석 결과입니다.
        ```json
        [
        {"bounds": [y1, y2], "aligned": true/false},
        ...
        ]
        ```

        **제한 조건:**
        * 코드를 작성하지 마세요. 오직 논리적 판단에 따른 분석 결과만을 제공해야 합니다.
        * 제시된 기준과 단계에 따라서만 판단하고, 임의의 해석을 추가하지 마세요.
        * 각 bounds 항목에 대해 독립적으로 판단하고, 그 결과를 리스트에 순서대로 포함시키세요.
        * 컴포넌트가 1개인 경우 true를 반환합니다. 
        """

    @staticmethod
    def issue_score_prompt():
        return """
        다음 이미지와 이미지에서 검출된 이슈를 보고, 이슈의 심각도를 판단해 주세요. 
        이미지에는 검출된 이슈와 관련된 바운딩 박스가 그려져있습니다. 전체 이미지와의 관계 속에서 이 이슈의 심각도를 판단해주세요.
        
    

        score 값은 이슈의 심각도 정도를 말합니다. 이에 대한 측도는 다음과 같습니다.
        - 1: (Fail with Critical issue)
        - 2: (Fail with issue)
        - 3: (Conditional Pass)
        - 4: (Pass with minor concern)
        - 5: (Pass with no issue)
        
        description 값은 이슈의 설명을 말합니다. 기존의 설명을 통합하여 자세하게 작성해주세요.
        한국어로 작성해주세요.
        """


    @staticmethod
    def sort_detected_issues_prompt():
        return """
        이미지와 json파일을 제공합니다.
        json파일에는 이미지에서 검출된 이슈의 목록이 포함되어 있습니다.
        description_id는 0부터 B까지의 16진법숫자로 구성되어 있습니다. 0부터 제일 심각한 이슈로 고려됩니다.
        이슈의 심각도를 판단하고 이에 따라 가장 중요한 이슈를 선택해야합니다.
        이슈를 선택하여 스키마를 유지한 상태로 제공해 주세요.

        선택한 이슈에 대한 구체적인 선택 이유를 ai_description에 제공해 주세요.
        """
